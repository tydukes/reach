{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"REACH","text":"<p>Responsive Empowering Accessible Computing Helper</p> <p> </p> <p>An AI-powered accessibility framework that empowers users with disabilities to interact with their computers through natural conversation. Voice-first, privacy-focused, and autonomous.</p>"},{"location":"#mission","title":"\ud83c\udfaf Mission","text":"<p>To create a truly accessible computing environment where anyone, regardless of physical ability, can accomplish any task through natural conversation with AI agents that understand, learn, and act autonomously on their behalf.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83c\udfa4 Voice-First Interface: Natural conversation replaces keyboard input</li> <li>\ud83e\udd16 Autonomous AI Agents: Handle complex tasks with minimal user input</li> <li>\ud83e\udde0 Adaptive Learning: System learns user patterns and anticipates needs</li> <li>\ud83d\udd12 Privacy-First: Local processing with encrypted data storage</li> <li>\ud83d\udd27 Extensible: Plugin architecture for community contributions</li> <li>\u267f Accessibility: Built from the ground up for users with disabilities</li> </ul>"},{"location":"#status","title":"\ud83d\udea7 Status","text":"<p>REACH is currently in active development. We're working toward our MVP release (v0.1.0).</p> <p>View Development Progress</p>"},{"location":"#security","title":"\ud83d\udd12 Security","text":"<p>Security is a top priority for REACH. We employ multiple layers of automated security scanning:</p> <ul> <li>CodeQL: Semantic code analysis on every commit</li> <li>Dependabot: Automated dependency updates</li> <li>npm audit: Vulnerability scanning in CI</li> <li>Socket.dev/Snyk: Supply chain security monitoring</li> </ul> <p>See Security Policy for our security policy and vulnerability reporting process.</p>"},{"location":"#roadmap","title":"\ud83d\udccb Roadmap","text":"<ul> <li>M1: Foundation &amp; Project Setup (Weeks 1-2)</li> <li>M2: Core CLI &amp; MCP Integration (Weeks 3-5)</li> <li>M3: Memory &amp; Context System (Weeks 6-8)</li> <li>M4: Voice Input/Output Pipeline (Weeks 9-11)</li> <li>M5: Electron GUI &amp; Integration (Weeks 12-15)</li> <li>M6: Polish, Testing &amp; MVP Release (Weeks 16-20)</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see Contributing Guide for guidelines.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License - see LICENSE for details.</p>"},{"location":"#acknowledgments","title":"\ud83c\udf1f Acknowledgments","text":"<p>Built with \u2764\ufe0f for the accessibility community.</p> <p>Note: This project is in early development. Documentation and features are being actively developed.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to REACH will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial project structure with monorepo setup</li> <li>Dev container configuration for consistent development environment</li> <li>ESLint 9 with TypeScript support</li> <li>MkDocs documentation site with Material theme</li> <li>Pre-commit hooks for code quality</li> <li>GitHub Actions CI/CD workflows</li> <li>Security scanning (CodeQL, Snyk, Socket.dev)</li> <li>Dependabot configuration for automated updates</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Migrated to ESLint 9 flat config format</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Dev container user conflict (GID 1000)</li> <li>Docker base image tag for Node.js 24</li> </ul>"},{"location":"changelog/#010-tbd","title":"0.1.0 - TBD","text":""},{"location":"changelog/#planned","title":"Planned","text":"<p>Initial MVP release with:</p> <ul> <li>Core library package</li> <li>CLI interface</li> <li>Basic MCP integration</li> <li>Memory and context management</li> <li>Voice input/output pipeline</li> <li>Electron GUI</li> </ul>"},{"location":"architecture/design-principles/","title":"Design Principles","text":"<p>These principles guide every decision in REACH development.</p>"},{"location":"architecture/design-principles/#1-accessibility-is-not-optional","title":"1. Accessibility is Not Optional","text":"<p>Every feature must be accessible from day one. Accessibility is not an afterthought\u2014it's the core purpose of REACH.</p>"},{"location":"architecture/design-principles/#requirements","title":"Requirements","text":"<ul> <li>Test with screen readers (NVDA, JAWS, VoiceOver)</li> <li>Ensure keyboard navigation works for all features</li> <li>Verify WCAG 2.1 AAA compliance</li> <li>Test with high contrast mode</li> <li>Consider users with motor, visual, auditory, and cognitive disabilities</li> </ul>"},{"location":"architecture/design-principles/#examples","title":"Examples","text":"<p>Good:</p> <pre><code>// Semantic HTML with ARIA labels\n&lt;button aria-label=\"Start voice recording\" onClick={startRecording}&gt;\n  \ud83c\udfa4 Record\n&lt;/button&gt;\n</code></pre> <p>Bad:</p> <pre><code>// Missing accessibility attributes\n&lt;div onClick={startRecording}&gt;\ud83c\udfa4&lt;/div&gt;\n</code></pre>"},{"location":"architecture/design-principles/#2-privacy-by-design","title":"2. Privacy by Design","text":"<p>User data must be protected at every layer. Privacy is not configurable\u2014it's mandatory.</p>"},{"location":"architecture/design-principles/#requirements_1","title":"Requirements","text":"<ul> <li>Local-first: Process data locally when possible</li> <li>Encrypted storage: All user data encrypted at rest</li> <li>Minimal telemetry: Only collect essential, anonymized metrics with user consent</li> <li>No cloud dependency: Core functionality works offline</li> </ul>"},{"location":"architecture/design-principles/#examples_1","title":"Examples","text":"<p>Good:</p> <pre><code>// Encrypt before storing\nconst encrypted = await encrypt(userData, userKey);\nawait storage.save(encrypted);\n</code></pre> <p>Bad:</p> <pre><code>// Storing sensitive data in plain text\nawait storage.save(userData);\n</code></pre>"},{"location":"architecture/design-principles/#3-autonomous-agents-minimize-user-effort","title":"3. Autonomous Agents Minimize User Effort","text":"<p>AI agents should handle complexity, not burden users with it.</p>"},{"location":"architecture/design-principles/#requirements_2","title":"Requirements","text":"<ul> <li>Understand context from conversation history</li> <li>Complete multi-step tasks independently</li> <li>Learn from user patterns</li> <li>Ask for clarification only when necessary</li> </ul>"},{"location":"architecture/design-principles/#examples_2","title":"Examples","text":"<p>Good:</p> <pre><code>// Agent understands context\nuser: \"Send that to John\"\nagent: // Knows \"that\" refers to previous file discussed\n</code></pre> <p>Bad:</p> <pre><code>// Requires explicit re-specification\nuser: \"Send that to John\"\nagent: \"What would you like to send?\"\n</code></pre>"},{"location":"architecture/design-principles/#4-natural-interaction-over-commands","title":"4. Natural Interaction Over Commands","text":"<p>Users speak naturally, not in command syntax.</p>"},{"location":"architecture/design-principles/#requirements_3","title":"Requirements","text":"<ul> <li>Support conversational language</li> <li>Handle ambiguity gracefully</li> <li>Don't require memorized commands</li> <li>Provide contextual suggestions</li> </ul>"},{"location":"architecture/design-principles/#examples_3","title":"Examples","text":"<p>Good:</p> <pre><code>User: \"Can you help me write an email to Sarah about the meeting?\"\nAgent: \"I'll draft an email to Sarah regarding your meeting. What would you like to say?\"\n</code></pre> <p>Bad:</p> <pre><code>User: \"email sarah meeting\"\nAgent: \"Invalid command. Use: email --to sarah --subject meeting\"\n</code></pre>"},{"location":"architecture/design-principles/#5-progressive-enhancement","title":"5. Progressive Enhancement","text":"<p>Features should work at a baseline level and improve based on available resources.</p>"},{"location":"architecture/design-principles/#requirements_4","title":"Requirements","text":"<ul> <li>Core functionality works without advanced features</li> <li>Graceful degradation when resources unavailable</li> <li>Optional cloud features don't break local-only mode</li> <li>Plugins enhance but don't replace core features</li> </ul>"},{"location":"architecture/design-principles/#examples_4","title":"Examples","text":"<p>Good:</p> <pre><code>// Falls back to basic TTS if advanced engine unavailable\nconst tts = await loadAdvancedTTS() || loadBasicTTS();\n</code></pre> <p>Bad:</p> <pre><code>// Crashes if advanced TTS unavailable\nconst tts = await loadAdvancedTTS();\ntts.speak(text); // Throws if tts is null\n</code></pre>"},{"location":"architecture/design-principles/#6-extensible-by-the-community","title":"6. Extensible by the Community","text":"<p>The architecture must support community contributions safely.</p>"},{"location":"architecture/design-principles/#requirements_5","title":"Requirements","text":"<ul> <li>Well-documented plugin API</li> <li>Security boundaries between core and plugins</li> <li>Version compatibility guarantees</li> <li>Clear deprecation policies</li> </ul>"},{"location":"architecture/design-principles/#examples_5","title":"Examples","text":"<p>Good:</p> <pre><code>// Plugin API with versioning\nexport interface ReachPlugin {\n  name: string;\n  version: string;\n  compatibleWith: string; // \"^0.1.0\"\n  initialize(): Promise&lt;void&gt;;\n}\n</code></pre> <p>Bad:</p> <pre><code>// Plugins access private internals\nexport class MyPlugin {\n  // Directly modifies core state\n  modifyCoreInternals(core: any) { ... }\n}\n</code></pre>"},{"location":"architecture/design-principles/#7-test-with-assistive-technologies","title":"7. Test with Assistive Technologies","text":"<p>Every change must be verified with real assistive technology tools.</p>"},{"location":"architecture/design-principles/#requirements_6","title":"Requirements","text":"<ul> <li>Run screen reader tests</li> <li>Test with keyboard-only navigation</li> <li>Verify with voice control software</li> <li>Check with high contrast themes</li> </ul>"},{"location":"architecture/design-principles/#tools","title":"Tools","text":"<ul> <li>NVDA (Windows, free)</li> <li>JAWS (Windows, commercial)</li> <li>VoiceOver (macOS, built-in)</li> <li>Orca (Linux, free)</li> </ul>"},{"location":"architecture/design-principles/#8-document-everything","title":"8. Document Everything","text":"<p>Code is written for humans first, machines second.</p>"},{"location":"architecture/design-principles/#requirements_7","title":"Requirements","text":"<ul> <li>Clear, concise comments</li> <li>Up-to-date README files</li> <li>API documentation with examples</li> <li>Architecture decision records (ADRs) for major choices</li> </ul>"},{"location":"architecture/design-principles/#examples_6","title":"Examples","text":"<p>Good:</p> <pre><code>/**\n * Encrypts user data using AES-256-GCM.\n *\n * @param data - Plain text data to encrypt\n * @param key - 256-bit encryption key\n * @returns Encrypted data with IV prepended\n *\n * @example\n * ```typescript\n * const encrypted = await encrypt(userData, userKey);\n * ```\n */\nexport async function encrypt(data: string, key: CryptoKey): Promise&lt;ArrayBuffer&gt;\n</code></pre> <p>Bad:</p> <pre><code>// Encrypts stuff\nexport async function encrypt(data: string, key: CryptoKey): Promise&lt;ArrayBuffer&gt;\n</code></pre>"},{"location":"architecture/design-principles/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview - System design</li> <li>Contributing Guide - How to contribute</li> <li>Core Package - Foundation types and utilities</li> </ul>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>REACH is built as a modular, extensible TypeScript monorepo designed for accessibility, privacy, and autonomous AI operation.</p>"},{"location":"architecture/overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                     REACH System                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510               \u2502\n\u2502  \u2502   Electron   \u2502          \u2502     CLI      \u2502               \u2502\n\u2502  \u2502     GUI      \u2502          \u2502   Interface  \u2502               \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2502\n\u2502         \u2502                         \u2502                         \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2502\n\u2502                  \u2502                                          \u2502\n\u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                              \u2502\n\u2502         \u2502   Core Library    \u2502                              \u2502\n\u2502         \u2502  (Types &amp; Utils)  \u2502                              \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                              \u2502\n\u2502                  \u2502                                          \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502     \u2502            \u2502            \u2502              \u2502            \u2502\n\u2502 \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510        \u2502\n\u2502 \u2502 Voice \u2502   \u2502 Memory\u2502   \u2502  MCP   \u2502   \u2502 Plugins \u2502        \u2502\n\u2502 \u2502(STT/  \u2502   \u2502Context\u2502   \u2502 Client \u2502   \u2502 System  \u2502        \u2502\n\u2502 \u2502 TTS)  \u2502   \u2502Manager\u2502   \u2502  (AI)  \u2502   \u2502         \u2502        \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2502\n\u2502                                                             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#core-principles","title":"Core Principles","text":""},{"location":"architecture/overview/#1-accessibility-first","title":"1. Accessibility First","text":"<ul> <li>Voice-First Design: Primary interaction through natural speech</li> <li>Keyboard Alternative: Full functionality without mouse</li> <li>Screen Reader Compatible: Semantic HTML and ARIA attributes</li> <li>High Contrast Support: Adaptable visual themes</li> <li>Motor Disability Support: Minimal physical interaction required</li> </ul>"},{"location":"architecture/overview/#2-privacy-focused","title":"2. Privacy-Focused","text":"<ul> <li>Local Processing: Speech and context processing happens locally</li> <li>Encrypted Storage: All user data encrypted at rest</li> <li>Minimal Telemetry: Only essential, anonymized metrics with consent</li> <li>No Cloud Dependency: Core functionality works offline</li> </ul>"},{"location":"architecture/overview/#3-autonomous-ai-agents","title":"3. Autonomous AI Agents","text":"<ul> <li>Context-Aware: Understands user history and preferences</li> <li>Task Completion: Handles multi-step workflows independently</li> <li>Learning System: Adapts to user patterns over time</li> <li>Model Context Protocol: Standardized AI agent communication</li> </ul>"},{"location":"architecture/overview/#4-extensible-architecture","title":"4. Extensible Architecture","text":"<ul> <li>Plugin System: Community contributions via plugins</li> <li>Modular Design: Independent, composable packages</li> <li>Clear Interfaces: Well-defined APIs between components</li> <li>Version Compatibility: Semantic versioning and deprecation paths</li> </ul>"},{"location":"architecture/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"architecture/overview/#frontend","title":"Frontend","text":"<ul> <li>Electron: Cross-platform desktop GUI</li> <li>TypeScript: Type-safe codebase</li> <li>React (planned): UI framework for Electron</li> </ul>"},{"location":"architecture/overview/#backendcore","title":"Backend/Core","text":"<ul> <li>Node.js 20+: Runtime environment</li> <li>TypeScript: Language for all packages</li> <li>npm workspaces: Monorepo management</li> </ul>"},{"location":"architecture/overview/#voice-processing","title":"Voice Processing","text":"<ul> <li>Speech-to-Text: Local STT engine (implementation TBD)</li> <li>Text-to-Speech: Local TTS engine (implementation TBD)</li> <li>Audio Libraries: FFmpeg, ALSA, PortAudio</li> </ul>"},{"location":"architecture/overview/#ai-integration","title":"AI Integration","text":"<ul> <li>Model Context Protocol (MCP): Agent communication standard</li> <li>Adaptive Memory: Context and conversation history</li> <li>Local Models: Privacy-focused AI inference</li> </ul>"},{"location":"architecture/overview/#package-responsibilities","title":"Package Responsibilities","text":"<ul> <li>@reach/core: Foundation package with shared types, interfaces, and utilities</li> <li>@reach/cli: Terminal-based interface for REACH</li> <li>@reach/electron: Desktop GUI built with Electron</li> <li>@reach/voice: Voice input (STT) and output (TTS) processing</li> <li>@reach/memory: User context, conversation history, and adaptive learning</li> <li>@reach/mcp-client: Model Context Protocol client for AI agent orchestration</li> </ul>"},{"location":"architecture/overview/#build-order","title":"Build Order","text":"<p>The build system respects package dependencies:</p> <ol> <li><code>@reach/core</code> (foundation, no dependencies)</li> <li>All other packages (depend on core)</li> </ol>"},{"location":"architecture/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Design Principles - Detailed design philosophy</li> <li>Core Package - Learn about the foundation</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"contributing/code-of-conduct/","title":"Code of Conduct","text":"<p>REACH is committed to providing a welcoming and inclusive environment for all contributors.</p> <p>For the complete Code of Conduct, please see CODE_OF_CONDUCT.md in the repository root.</p>"},{"location":"contributing/code-of-conduct/#our-pledge","title":"Our Pledge","text":"<p>We pledge to make participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contributing/code-of-conduct/#reporting","title":"Reporting","text":"<p>If you experience or witness unacceptable behavior, please report it to the project maintainers.</p>"},{"location":"contributing/code-of-conduct/#enforcement","title":"Enforcement","text":"<p>Violations of the Code of Conduct may result in temporary or permanent bans from project participation.</p>"},{"location":"contributing/code-style/","title":"Code Style Guide","text":"<p>REACH follows The Dukes Engineering Style Guide, a comprehensive set of standards for DevOps and software engineering.</p>"},{"location":"contributing/code-style/#overview","title":"Overview","text":"<p>The style guide defines consistent, secure, and AI-optimized standards for:</p> <ul> <li>TypeScript and JavaScript</li> <li>Python</li> <li>Shell scripts (Bash)</li> <li>YAML and JSON</li> <li>Documentation (Markdown)</li> </ul>"},{"location":"contributing/code-style/#key-principles","title":"Key Principles","text":""},{"location":"contributing/code-style/#1-strict-formatting","title":"1. Strict Formatting","text":"<p>All code must pass automated formatting checks:</p> <ul> <li>ESLint for TypeScript/JavaScript</li> <li>Prettier for code formatting</li> <li>Black for Python</li> <li>markdownlint for documentation</li> </ul>"},{"location":"contributing/code-style/#2-ai-friendly-metadata","title":"2. AI-Friendly Metadata","text":"<p>Source files should include metadata tags for improved AI understanding:</p> <pre><code>// @module: core-types\n/**\n * Core type definitions for REACH\n */\nexport interface User {\n  id: string;\n  name: string;\n}\n</code></pre>"},{"location":"contributing/code-style/#3-type-safety","title":"3. Type Safety","text":"<p>TypeScript must be configured with strict mode:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre>"},{"location":"contributing/code-style/#validation","title":"Validation","text":"<p>All PRs are automatically validated against the style guide in CI. You can run validation locally:</p> <pre><code># Install UV\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Run validation\nuv run python scripts/validate_style_guide.py\n</code></pre>"},{"location":"contributing/code-style/#language-specific-guidelines","title":"Language-Specific Guidelines","text":""},{"location":"contributing/code-style/#typescript","title":"TypeScript","text":"<ul> <li>Add <code>@module:</code> tags to all source files</li> <li>Use strict type checking</li> <li>Export explicit types for public APIs</li> <li>Write TSDoc comments for public functions</li> </ul> <p>Example:</p> <pre><code>// @module: voice-processor\n\n/**\n * Process audio input for speech recognition.\n *\n * @param audio - Raw audio buffer\n * @returns Transcribed text\n */\nexport async function processAudio(audio: AudioBuffer): Promise&lt;string&gt; {\n  // Implementation\n}\n</code></pre>"},{"location":"contributing/code-style/#python","title":"Python","text":"<ul> <li>Follow PEP 8 style guide</li> <li>Use Black for formatting</li> <li>Add type hints for function signatures</li> <li>Include module docstrings</li> </ul> <p>Example:</p> <pre><code># @module: validation\n\n\"\"\"Validation utilities for REACH.\"\"\"\n\ndef validate_input(data: dict) -&gt; bool:\n    \"\"\"\n    Validate input data structure.\n\n    Args:\n        data: Input data dictionary\n\n    Returns:\n        True if valid, False otherwise\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"contributing/code-style/#markdown","title":"Markdown","text":"<ul> <li>Use markdownlint for consistency</li> <li>Maximum line length: 120 characters</li> <li>Include proper heading hierarchy</li> <li>Add code language specifiers to fenced code blocks</li> </ul>"},{"location":"contributing/code-style/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks to automatically validate code before commits:</p> <pre><code># Install pre-commit\nuv run pre-commit install\n\n# Run manually\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"contributing/code-style/#resources","title":"Resources","text":"<ul> <li>The Dukes Engineering Style Guide</li> <li>TypeScript Guide</li> <li>Python Guide</li> <li>Metadata Schema</li> </ul>"},{"location":"contributing/code-style/#questions","title":"Questions?","text":"<p>If you're unsure about code style requirements, check the style guide documentation or ask in the PR discussion.</p>"},{"location":"contributing/contributing/","title":"Contributing to REACH","text":"<p>Thank you for your interest in contributing to REACH! This guide will help you get started.</p> <p>For the complete contributing guide, please see CONTRIBUTING.md in the repository root.</p>"},{"location":"contributing/contributing/#quick-links","title":"Quick Links","text":"<ul> <li>Code of Conduct</li> <li>Security Policy</li> <li>Development Setup</li> <li>Architecture Overview</li> <li>Code Style Guide - The Dukes Engineering Style Guide</li> </ul>"},{"location":"contributing/contributing/#code-style-standards","title":"Code Style Standards","text":"<p>REACH follows The Dukes Engineering Style Guide for all code contributions.</p>"},{"location":"contributing/contributing/#key-requirements","title":"Key Requirements","text":"<ul> <li>TypeScript: Add <code>@module:</code> metadata tags to all source files</li> <li>Formatting: Strict ESLint + Prettier enforcement</li> <li>Type Safety: Full TypeScript strict mode</li> <li>Testing: Write tests for all new functionality</li> <li>Documentation: Update docs when changing behavior</li> </ul>"},{"location":"contributing/contributing/#validation","title":"Validation","text":"<p>All pull requests are automatically validated against the style guide in CI:</p> <pre><code># Run style guide validation locally\nuv run python scripts/validate_style_guide.py\n</code></pre> <p>For detailed language-specific guidelines, see:</p> <ul> <li>TypeScript Guide</li> <li>Python Guide</li> <li>Metadata Schema</li> </ul>"},{"location":"contributing/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork</li> <li>Set up the dev container</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/contributing/#development-workflow","title":"Development Workflow","text":"<p>See the Quick Start Guide for detailed development instructions.</p>"},{"location":"contributing/contributing/#questions","title":"Questions?","text":"<ul> <li>GitHub Discussions</li> <li>Issues</li> </ul>"},{"location":"contributing/security/","title":"Security Policy","text":"<p>Security is a top priority for REACH. We take all security vulnerabilities seriously.</p> <p>For the complete Security Policy, please see SECURITY.md in the repository root.</p>"},{"location":"contributing/security/#supported-versions","title":"Supported Versions","text":"Version Supported 0.1.x :white_check_mark:"},{"location":"contributing/security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Please do not report security vulnerabilities through public GitHub issues.</p> <p>Instead, please email security reports to the maintainers. You should receive a response within 48 hours.</p>"},{"location":"contributing/security/#security-measures","title":"Security Measures","text":"<p>REACH employs multiple layers of automated security scanning:</p> <ul> <li>CodeQL: Semantic code analysis on every commit</li> <li>Dependabot: Automated dependency updates</li> <li>npm audit: Vulnerability scanning in CI</li> <li>Socket.dev/Snyk: Supply chain security monitoring</li> </ul>"},{"location":"contributing/security/#disclosure-policy","title":"Disclosure Policy","text":"<p>We follow coordinated vulnerability disclosure practices and will work with security researchers to address reported vulnerabilities responsibly.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing REACH, ensure you have the following:</p> <ul> <li>Node.js: 20.0.0 or higher</li> <li>npm: 10.0.0 or higher</li> <li>Docker Desktop: For dev container environment (recommended)</li> <li>Python: 3.11+ (for future AI/ML tooling)</li> </ul>"},{"location":"getting-started/installation/#development-environment-setup","title":"Development Environment Setup","text":"<p>The recommended way to develop REACH is using the VSCode dev container, which provides a consistent, reproducible environment with all dependencies pre-installed.</p>"},{"location":"getting-started/installation/#using-dev-container-recommended","title":"Using Dev Container (Recommended)","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/tydukes/reach.git\ncd reach\n</code></pre> <ol> <li>Open in VSCode:</li> </ol> <pre><code>code .\n</code></pre> <ol> <li>Reopen in Container:</li> <li>Click \"Reopen in Container\" when prompted</li> <li>Or press <code>Cmd+Shift+P</code> and select \"Dev Containers: Reopen in Container\"</li> <li> <p>Wait for the container to build (first time takes 5-10 minutes)</p> </li> <li> <p>Verify installation:</p> </li> </ol> <pre><code>node --version   # Should be 24.x\nnpm --version    # Should be 11.x\npython3 --version # Should be 3.11.x\n</code></pre>"},{"location":"getting-started/installation/#manual-setup-without-dev-container","title":"Manual Setup (Without Dev Container)","text":"<p>If you prefer not to use the dev container:</p> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Build all packages:</li> </ol> <pre><code>npm run build\n</code></pre> <ol> <li>Verify the build:</li> </ol> <pre><code>npm run typecheck\nnpm run lint\nnpm run test\n</code></pre>"},{"location":"getting-started/installation/#whats-in-the-dev-container","title":"What's in the Dev Container?","text":"<p>The dev container includes:</p> <ul> <li>Node.js 24.10.0 with npm 11.6.2</li> <li>Python 3.11.2 for future ML tools</li> <li>FFmpeg 5.1.7 with full audio library support (ALSA, PortAudio, libsndfile)</li> <li>Pre-configured VSCode extensions (ESLint, Prettier, TypeScript, GitLens)</li> <li>Git, Zsh with Oh My Zsh</li> <li>Claude Code CLI for AI-assisted development</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get started building with REACH</li> <li>Architecture Overview - Understand the system design</li> <li>Contributing Guide - Learn how to contribute</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get up and running with REACH development quickly.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<p>Ensure you've completed the Installation steps before proceeding.</p>"},{"location":"getting-started/quick-start/#project-structure","title":"Project Structure","text":"<p>REACH is organized as a monorepo using npm workspaces:</p> <pre><code>reach/\n\u251c\u2500\u2500 packages/\n\u2502   \u251c\u2500\u2500 core/          # Core types, interfaces, and shared utilities\n\u2502   \u251c\u2500\u2500 cli/           # Command-line interface\n\u2502   \u251c\u2500\u2500 electron/      # Desktop GUI application\n\u2502   \u251c\u2500\u2500 voice/         # Voice input/output processing (STT/TTS)\n\u2502   \u251c\u2500\u2500 memory/        # Memory and context management system\n\u2502   \u2514\u2500\u2500 mcp-client/    # Model Context Protocol client integration\n\u251c\u2500\u2500 .devcontainer/     # VSCode dev container configuration\n\u2514\u2500\u2500 docs/              # Documentation (this site)\n</code></pre>"},{"location":"getting-started/quick-start/#building-the-project","title":"Building the Project","text":"<p>Build all packages in dependency order:</p> <pre><code>npm run build\n</code></pre> <p>Build a specific package:</p> <pre><code>npm run build:core\n</code></pre>"},{"location":"getting-started/quick-start/#running-tests","title":"Running Tests","text":"<p>Run all tests:</p> <pre><code>npm run test\n</code></pre> <p>Run tests for a specific package:</p> <pre><code>npm run test -w @reach/core\n</code></pre>"},{"location":"getting-started/quick-start/#linting-and-type-checking","title":"Linting and Type Checking","text":"<p>Run ESLint:</p> <pre><code>npm run lint\n</code></pre> <p>Run TypeScript type checking:</p> <pre><code>npm run typecheck\n</code></pre>"},{"location":"getting-started/quick-start/#code-style-validation","title":"Code Style Validation","text":"<p>REACH follows The Dukes Engineering Style Guide. Validate your code:</p> <pre><code># Install UV if not already installed\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Run style guide validation\nuv run python scripts/validate_style_guide.py\n</code></pre> <p>This checks for required metadata tags and proper code structure.</p>"},{"location":"getting-started/quick-start/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a feature branch:</li> </ol> <pre><code>git checkout -b feature/issue-NUMBER-brief-description\n</code></pre> <ol> <li>Make your changes:</li> <li>Follow the Contributing Guide</li> <li>Write tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Run checks before committing:</p> </li> </ol> <pre><code>npm run lint\nnpm run typecheck\nnpm run test\n</code></pre> <ol> <li>Commit with conventional commit format:</li> </ol> <pre><code>git commit -m \"feat: add voice input support\"\n</code></pre> <ol> <li>Push and create a pull request:</li> </ol> <pre><code>git push -u origin feature/issue-NUMBER-brief-description\n</code></pre>"},{"location":"getting-started/quick-start/#common-tasks","title":"Common Tasks","text":""},{"location":"getting-started/quick-start/#adding-a-new-package","title":"Adding a New Package","text":"<pre><code>mkdir packages/my-new-package\ncd packages/my-new-package\nnpm init -y\n# Edit package.json to add dependencies on @reach/core\n</code></pre>"},{"location":"getting-started/quick-start/#installing-dependencies","title":"Installing Dependencies","text":"<pre><code># Install in root for all packages\nnpm install\n\n# Install in specific package\nnpm install &lt;package-name&gt; -w @reach/my-package\n</code></pre>"},{"location":"getting-started/quick-start/#cleaning-build-artifacts","title":"Cleaning Build Artifacts","text":"<pre><code>npm run clean\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Architecture Overview - Understand the system design</li> <li>Core Package - Learn about shared types and utilities</li> <li>Contributing Guide - Detailed contribution guidelines</li> </ul>"},{"location":"packages/cli/","title":"@reach/cli","text":"<p>Terminal-based interface providing command-line access to REACH AI agents.</p>"},{"location":"packages/cli/#overview","title":"Overview","text":"<p>The CLI package offers a text-based interface for interacting with REACH, ideal for:</p> <ul> <li>Terminal users and developers</li> <li>Scripting and automation</li> <li>Headless server environments</li> <li>Power users who prefer keyboard-only interfaces</li> </ul>"},{"location":"packages/cli/#installation","title":"Installation","text":"<pre><code>npm install -g @reach/cli\n</code></pre>"},{"location":"packages/cli/#usage","title":"Usage","text":"<pre><code># Start interactive session\nreach\n\n# Execute one-off command\nreach \"Send email to John about meeting\"\n\n# Show help\nreach --help\n</code></pre>"},{"location":"packages/cli/#features","title":"Features","text":"<ul> <li>Interactive conversation mode</li> <li>Command history and autocomplete</li> <li>Configurable output formatting</li> <li>Session persistence</li> </ul>"},{"location":"packages/cli/#status","title":"Status","text":"<p>\ud83d\udea7 Planned for M2 - Core CLI &amp; MCP Integration (Weeks 3-5)</p>"},{"location":"packages/cli/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: <code>@reach/core</code>, <code>@reach/mcp-client</code></li> <li>Location: <code>packages/cli/</code></li> </ul>"},{"location":"packages/cli/#next-steps","title":"Next Steps","text":"<ul> <li>Electron Package - Desktop GUI</li> <li>MCP Client - AI agent orchestration</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"packages/core/","title":"@reach/core","text":"<p>Foundation package containing shared types, interfaces, and utilities used across all REACH packages.</p>"},{"location":"packages/core/#overview","title":"Overview","text":"<p>The <code>@reach/core</code> package serves as the foundation for the entire REACH ecosystem. It provides:</p> <ul> <li>Common TypeScript types and interfaces</li> <li>Shared utility functions</li> <li>Core abstractions for extensibility</li> <li>Constants and configuration schemas</li> </ul> <p>All other packages depend on <code>@reach/core</code>, making it the first package built in the monorepo.</p>"},{"location":"packages/core/#installation","title":"Installation","text":"<pre><code>npm install @reach/core\n</code></pre>"},{"location":"packages/core/#key-exports","title":"Key Exports","text":""},{"location":"packages/core/#types","title":"Types","text":"<pre><code>// TODO: Add core types as they are developed\n</code></pre>"},{"location":"packages/core/#interfaces","title":"Interfaces","text":"<pre><code>// TODO: Add core interfaces as they are developed\n</code></pre>"},{"location":"packages/core/#utilities","title":"Utilities","text":"<pre><code>// TODO: Add utility functions as they are developed\n</code></pre>"},{"location":"packages/core/#status","title":"Status","text":"<p>\ud83d\udea7 In Development - This package is currently being built as part of Milestone M1.</p>"},{"location":"packages/core/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: None (foundation package)</li> <li>Location: <code>packages/core/</code></li> </ul>"},{"location":"packages/core/#next-steps","title":"Next Steps","text":"<ul> <li>CLI Package - Command-line interface</li> <li>Architecture Overview - System design</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"packages/electron/","title":"@reach/electron","text":"<p>Cross-platform desktop GUI application built with Electron.</p>"},{"location":"packages/electron/#overview","title":"Overview","text":"<p>The Electron package provides a visual interface for REACH, offering:</p> <ul> <li>Native desktop application feel</li> <li>Cross-platform support (Windows, macOS, Linux)</li> <li>System tray integration</li> <li>Voice input visualization</li> <li>Accessible UI components</li> </ul>"},{"location":"packages/electron/#installation","title":"Installation","text":"<p>Download the appropriate installer for your platform:</p> <ul> <li>Windows: <code>REACH-Setup-0.1.0.exe</code></li> <li>macOS: <code>REACH-0.1.0.dmg</code></li> <li>Linux: <code>reach-0.1.0.AppImage</code></li> </ul>"},{"location":"packages/electron/#features","title":"Features","text":"<ul> <li>Voice input with visual feedback</li> <li>Conversation history viewer</li> <li>System settings and preferences</li> <li>Notification center</li> <li>Keyboard shortcuts for all actions</li> </ul>"},{"location":"packages/electron/#status","title":"Status","text":"<p>\ud83d\udea7 Planned for M5 - Electron GUI &amp; Integration (Weeks 12-15)</p>"},{"location":"packages/electron/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: <code>@reach/core</code>, <code>@reach/cli</code>, <code>@reach/voice</code>, <code>@reach/memory</code></li> <li>Location: <code>packages/electron/</code></li> </ul>"},{"location":"packages/electron/#accessibility","title":"Accessibility","text":"<p>The Electron GUI is designed with accessibility as the highest priority:</p> <ul> <li>Full keyboard navigation</li> <li>Screen reader support (NVDA, JAWS, VoiceOver)</li> <li>High contrast themes</li> <li>Customizable text sizes</li> <li>Voice-first interaction model</li> </ul>"},{"location":"packages/electron/#next-steps","title":"Next Steps","text":"<ul> <li>Voice Package - Speech processing</li> <li>Architecture Overview - System design</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"packages/mcp-client/","title":"@reach/mcp-client","text":"<p>Model Context Protocol (MCP) client for AI agent orchestration and communication.</p>"},{"location":"packages/mcp-client/#overview","title":"Overview","text":"<p>The MCP client package integrates REACH with AI agents using the Model Context Protocol standard, enabling:</p> <ul> <li>Standardized agent communication</li> <li>Tool and resource sharing</li> <li>Multi-agent coordination</li> <li>Extensible AI capabilities</li> </ul>"},{"location":"packages/mcp-client/#installation","title":"Installation","text":"<pre><code>npm install @reach/mcp-client\n</code></pre>"},{"location":"packages/mcp-client/#what-is-mcp","title":"What is MCP?","text":"<p>The Model Context Protocol is an open standard for connecting AI assistants to external tools and data sources. It provides:</p> <ul> <li>Unified interface for AI agents</li> <li>Secure tool execution</li> <li>Resource management</li> <li>Context sharing</li> </ul>"},{"location":"packages/mcp-client/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         MCP Client Package                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502       MCP Protocol Handler           \u2502 \u2502\n\u2502  \u2502  - Connection management             \u2502 \u2502\n\u2502  \u2502  - Message serialization             \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502               \u2502                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502         Tool Registry                \u2502 \u2502\n\u2502  \u2502  - Available tools                   \u2502 \u2502\n\u2502  \u2502  - Capability negotiation            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502               \u2502                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502      Agent Orchestrator              \u2502 \u2502\n\u2502  \u2502  - Task routing                      \u2502 \u2502\n\u2502  \u2502  - Multi-agent coordination          \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"packages/mcp-client/#features","title":"Features","text":""},{"location":"packages/mcp-client/#agent-communication","title":"Agent Communication","text":"<ul> <li>Bidirectional messaging with AI agents</li> <li>Request/response handling</li> <li>Event streaming</li> </ul>"},{"location":"packages/mcp-client/#tool-management","title":"Tool Management","text":"<ul> <li>Register custom tools</li> <li>Expose REACH capabilities to agents</li> <li>Execute tool calls safely</li> </ul>"},{"location":"packages/mcp-client/#context-sharing","title":"Context Sharing","text":"<ul> <li>Provide conversation history to agents</li> <li>Share user preferences and settings</li> <li>Manage context windows</li> </ul>"},{"location":"packages/mcp-client/#status","title":"Status","text":"<p>\ud83d\udea7 Planned for M2 - Core CLI &amp; MCP Integration (Weeks 3-5)</p>"},{"location":"packages/mcp-client/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: <code>@reach/core</code>, <code>@reach/memory</code></li> <li>Location: <code>packages/mcp-client/</code></li> </ul>"},{"location":"packages/mcp-client/#next-steps","title":"Next Steps","text":"<ul> <li>CLI Package - Command-line interface</li> <li>Memory Package - Context management</li> <li>Architecture Overview - System design</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"packages/memory/","title":"@reach/memory","text":"<p>Memory and context management system enabling adaptive learning and personalization.</p>"},{"location":"packages/memory/#overview","title":"Overview","text":"<p>The memory package provides:</p> <ul> <li>Conversation history persistence</li> <li>User preference learning</li> <li>Context-aware suggestions</li> <li>Pattern recognition and adaptation</li> </ul>"},{"location":"packages/memory/#installation","title":"Installation","text":"<pre><code>npm install @reach/memory\n</code></pre>"},{"location":"packages/memory/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Memory Package                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502     Conversation History Store     \u2502 \u2502\n\u2502  \u2502   (Encrypted local storage)        \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502               \u2502                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502       Context Manager              \u2502 \u2502\n\u2502  \u2502  - Session management              \u2502 \u2502\n\u2502  \u2502  - Relevance scoring               \u2502 \u2502\n\u2502  \u2502  - Memory consolidation            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502               \u2502                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502     Adaptive Learning Engine       \u2502 \u2502\n\u2502  \u2502  - Pattern detection               \u2502 \u2502\n\u2502  \u2502  - Preference extraction           \u2502 \u2502\n\u2502  \u2502  - Behavior prediction             \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"packages/memory/#privacy-security","title":"Privacy &amp; Security","text":"<ul> <li>Encrypted at rest: All memories encrypted using user's key</li> <li>Local storage: No cloud synchronization by default</li> <li>User control: Clear, export, or delete memories anytime</li> <li>Transparency: View what REACH remembers about you</li> </ul>"},{"location":"packages/memory/#features","title":"Features","text":""},{"location":"packages/memory/#conversation-history","title":"Conversation History","text":"<ul> <li>Persistent chat logs across sessions</li> <li>Searchable conversation archive</li> <li>Configurable retention periods</li> </ul>"},{"location":"packages/memory/#context-awareness","title":"Context Awareness","text":"<ul> <li>Track conversation threads</li> <li>Understand references to previous topics</li> <li>Maintain multi-turn context</li> </ul>"},{"location":"packages/memory/#adaptive-learning","title":"Adaptive Learning","text":"<ul> <li>Learn user preferences over time</li> <li>Predict common tasks</li> <li>Customize responses based on user patterns</li> </ul>"},{"location":"packages/memory/#status","title":"Status","text":"<p>\ud83d\udea7 Planned for M3 - Memory &amp; Context System (Weeks 6-8)</p>"},{"location":"packages/memory/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: <code>@reach/core</code></li> <li>Location: <code>packages/memory/</code></li> </ul>"},{"location":"packages/memory/#next-steps","title":"Next Steps","text":"<ul> <li>MCP Client - AI agent orchestration</li> <li>Architecture Overview - System design</li> <li>Contributing - Help build REACH</li> </ul>"},{"location":"packages/voice/","title":"@reach/voice","text":"<p>Voice input/output processing module handling Speech-to-Text (STT) and Text-to-Speech (TTS).</p>"},{"location":"packages/voice/#overview","title":"Overview","text":"<p>The voice package is the cornerstone of REACH's voice-first interface, providing:</p> <ul> <li>Local speech-to-text conversion</li> <li>Natural text-to-speech synthesis</li> <li>Audio input/output management</li> <li>Noise cancellation and audio enhancement</li> </ul>"},{"location":"packages/voice/#installation","title":"Installation","text":"<pre><code>npm install @reach/voice\n</code></pre>"},{"location":"packages/voice/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Voice Package               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Audio Input \u2502  \u2502 Audio Output\u2502 \u2502\n\u2502  \u2502  (Microphone)\u2502  \u2502  (Speakers) \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502         \u2502                 \u2502         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  STT Engine  \u2502  \u2502  TTS Engine \u2502 \u2502\n\u2502  \u2502   (Local)    \u2502  \u2502   (Local)   \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502         \u2502                 \u2502         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502      Voice Processing API     \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"packages/voice/#privacy","title":"Privacy","text":"<p>All voice processing happens locally on the user's machine:</p> <ul> <li>No cloud services required</li> <li>Audio data never leaves the device</li> <li>Models run entirely offline</li> <li>Maximum privacy protection</li> </ul>"},{"location":"packages/voice/#status","title":"Status","text":"<p>\ud83d\udea7 Planned for M4 - Voice Input/Output Pipeline (Weeks 9-11)</p>"},{"location":"packages/voice/#package-information","title":"Package Information","text":"<ul> <li>Version: 0.1.0 (MVP)</li> <li>License: MIT</li> <li>Dependencies: <code>@reach/core</code>, FFmpeg, PortAudio, ALSA</li> <li>Location: <code>packages/voice/</code></li> </ul>"},{"location":"packages/voice/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Windows: WASAPI audio API</li> <li>macOS: CoreAudio</li> <li>Linux: ALSA, PulseAudio</li> </ul>"},{"location":"packages/voice/#next-steps","title":"Next Steps","text":"<ul> <li>Memory Package - Context management</li> <li>Architecture Overview - System design</li> <li>Contributing - Help build REACH</li> </ul>"}]}